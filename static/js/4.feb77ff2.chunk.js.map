{"version":3,"sources":["components/ImageOutput/ImageOutput.module.scss","components/ImgDialog/ImgDialog.module.scss","components/ImgDialog/ImgDialog.js","components/ImageOutput/ImageOutput.js"],"names":["module","exports","ImgDialog","props","isOpen","handleClose","handleInfo","showInfo","selectedImg","selectedAlt","selectedUser","selectedPageUrl","Dialog","className","classes","modal","open","onClose","maxWidth","onClick","CloseIcon","src","alt","InfoIcon","InfoContainer","OpenInNewIcon","window","ImageOutput","searchText","images","totalImages","useState","setSelectedImg","setSelectedAlt","setSelectedUser","setSelectedPageUrl","setIsOpen","setShowInfo","replaceSize","str","stringToAdd","substring","length","Container","ImageContainer","NoImages","TotalImages","ImageList","cols","map","img","ImageListItem","webformatURL","tags","imgSelected","largeImageURL","imgAlt","imgUser","user","imgPageUrl","pageURL","id"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,SAAW,8BAA8B,YAAc,mC,oBCA5HD,EAAOC,QAAU,CAAC,UAAY,6BAA6B,SAAW,4BAA4B,cAAgB,iCAAiC,cAAgB,mC,gMCkDpJC,EAzCG,SAACC,GAAW,IAE1BC,EAQED,EARFC,OACAC,EAOEF,EAPFE,YACAC,EAMEH,EANFG,WACAC,EAKEJ,EALFI,SACAC,EAIEL,EAJFK,YACAC,EAGEN,EAHFM,YACAC,EAEEP,EAFFO,aACAC,EACER,EADFQ,gBAQF,OACE,eAACC,EAAA,EAAD,CACEC,UAAWC,IAAQF,OACnBG,MAAM,OACNC,KAAMZ,EACNa,QAASZ,EACTa,SAAS,KALX,UAOE,cAAC,IAAD,CAAWC,QAASd,EAAaQ,UAAWC,IAAQM,YACpD,qBAAKC,IAAKb,EAAac,IAAKb,IAC5B,cAAC,IAAD,CAAUU,QAASb,EAAYO,UAAWC,IAAQS,WACjDhB,GACC,sBAAKM,UAAWC,IAAQU,cAAxB,UACE,yCAAYd,KACZ,cAAC,IAAD,CACEG,UAAWC,IAAQW,cACnBN,QApBe,WACvBO,OAAOV,KAAKL,aC6DDgB,UA9EK,SAACxB,GAAW,IACtByB,EAAoCzB,EAApCyB,WAAYC,EAAwB1B,EAAxB0B,OAAQC,EAAgB3B,EAAhB2B,YADC,EAGSC,mBAAS,IAHlB,mBAGtBvB,EAHsB,KAGTwB,EAHS,OAISD,mBAAS,IAJlB,mBAItBtB,EAJsB,KAITwB,EAJS,OAKWF,mBAAS,IALpB,mBAKtBrB,EALsB,KAKRwB,EALQ,OAMiBH,mBAAS,IAN1B,mBAMtBpB,EANsB,KAMLwB,EANK,OAODJ,oBAAS,GAPR,mBAOtB3B,EAPsB,KAOdgC,EAPc,OAQGL,oBAAS,GARZ,mBAQtBxB,EARsB,KAQZ8B,EARY,KAiCvBC,EAAc,SAACC,EAAKC,GACxB,OACED,EAAIE,UAAU,EAAGF,EAAIG,OAAS,GAC9BF,EACAD,EAAIE,UAAUF,EAAIG,OAAS,EAAGH,EAAIG,SAItC,OACE,eAACC,EAAA,EAAD,CAAW9B,UAAWC,IAAQ8B,eAA9B,UACGhB,EAAWc,OAAS,GAAuB,IAAlBb,EAAOa,OAC/B,mBAAG7B,UAAWC,IAAQ+B,SAAtB,0CAEA,oBAAGhC,UAAWC,IAAQgC,YAAtB,UAAoChB,EAApC,aAEDD,EAAOa,OAAS,GACf,cAACK,EAAA,EAAD,CAAWC,KAAM,EAAGnC,UAAWC,IAAQiC,UAAvC,SACGlB,EAAOoB,KAAI,SAACC,GAAD,OACV,cAACC,EAAA,EAAD,CAA4BtC,UAAWC,IAAQqC,cAA/C,SACE,qBACE9B,IAAKiB,EAAYY,EAAIE,aAvBf,OAwBN9B,IAAK4B,EAAIG,KACTlC,QAAS,kBA5CHmC,EA6COJ,EAAIK,cA7CEC,EA6CaN,EAAIG,KA7CTI,EA6CeP,EAAIQ,KA7CVC,EA6CgBT,EAAIU,QA5CpExB,GAAU,GACVJ,EAAesB,GACfrB,EAAeuB,GACftB,EAAgBuB,QAChBtB,EAAmBwB,GALF,IAACL,EAAaE,EAAQC,EAASE,MAwCpBT,EAAIW,SAa9B,cAAC,EAAD,CACEzD,OAAQA,EACRC,YA9Cc,WAClB+B,GAAU,GACVC,GAAY,IA6CR/B,WAzCa,WACjB+B,GAAa9B,IAyCTA,SAAUA,EACVC,YAAaA,EACbC,YAAaA,EACbC,aAAcA,EACdC,gBAAiBA","file":"static/js/4.feb77ff2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ImageListItem\":\"ImageOutput_ImageListItem__3NikR\",\"NoImages\":\"ImageOutput_NoImages__3YB8k\",\"TotalImages\":\"ImageOutput_TotalImages___Y2FB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CloseIcon\":\"ImgDialog_CloseIcon__2K08m\",\"InfoIcon\":\"ImgDialog_InfoIcon__16EnI\",\"InfoContainer\":\"ImgDialog_InfoContainer__u2faH\",\"OpenInNewIcon\":\"ImgDialog_OpenInNewIcon__FXfVj\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dialog } from \"@material-ui/core\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport InfoIcon from \"@material-ui/icons/Info\";\n\nimport OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\n\nimport classes from \"./ImgDialog.module.scss\";\n\nconst ImgDialog = (props) => {\n  const {\n    isOpen,\n    handleClose,\n    handleInfo,\n    showInfo,\n    selectedImg,\n    selectedAlt,\n    selectedUser,\n    selectedPageUrl,\n  } = props;\n\n  // Leads to the source of the image on the pixabay page\n  const handleOpenSource = () => {\n    window.open(selectedPageUrl);\n  };\n\n  return (\n    <Dialog\n      className={classes.Dialog}\n      modal=\"true\"\n      open={isOpen}\n      onClose={handleClose}\n      maxWidth=\"md\"\n    >\n      <CloseIcon onClick={handleClose} className={classes.CloseIcon} />\n      <img src={selectedImg} alt={selectedAlt} />\n      <InfoIcon onClick={handleInfo} className={classes.InfoIcon} />\n      {showInfo && (\n        <div className={classes.InfoContainer}>\n          <p>Author: {selectedUser}</p>\n          <OpenInNewIcon\n            className={classes.OpenInNewIcon}\n            onClick={handleOpenSource}\n          />\n        </div>\n      )}\n    </Dialog>\n  );\n};\n\nexport default ImgDialog;\n\nImgDialog.propTypes = {\n  handleOpenSource: PropTypes.func,\n};\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Container, ImageList, ImageListItem } from \"@material-ui/core\";\n\nimport classes from \"./ImageOutput.module.scss\";\nimport ImgDialog from \"../ImgDialog/ImgDialog\";\n\nconst ImageOutput = (props) => {\n  const { searchText, images, totalImages } = props;\n\n  const [selectedImg, setSelectedImg] = useState(\"\");\n  const [selectedAlt, setSelectedAlt] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState(\"\");\n  const [selectedPageUrl, setSelectedPageUrl] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [showInfo, setShowInfo] = useState(false);\n\n  // Open the Dialog component\n  const handleOpen = (imgSelected, imgAlt, imgUser, imgPageUrl) => {\n    setIsOpen(true);\n    setSelectedImg(imgSelected);\n    setSelectedAlt(imgAlt);\n    setSelectedUser(imgUser);\n    setSelectedPageUrl(imgPageUrl);\n  };\n\n  // Close the Dialog component\n  const handleClose = () => {\n    setIsOpen(false);\n    setShowInfo(false);\n  };\n\n  // Show and hide image author information\n  const handleInfo = () => {\n    setShowInfo(!showInfo);\n  };\n\n  const stringToAdd = \"340\";\n\n  // Replace the width value of the image in the string\n  const replaceSize = (str, stringToAdd) => {\n    return (\n      str.substring(0, str.length - 7) +\n      stringToAdd +\n      str.substring(str.length - 4, str.length)\n    );\n  };\n\n  return (\n    <Container className={classes.ImageContainer}>\n      {searchText.length > 0 && images.length === 0 ? (\n        <p className={classes.NoImages}>No image matches your search</p>\n      ) : (\n        <p className={classes.TotalImages}>{totalImages} images</p>\n      )}\n      {images.length > 0 && (\n        <ImageList cols={4} className={classes.ImageList}>\n          {images.map((img) => (\n            <ImageListItem key={img.id} className={classes.ImageListItem}>\n              <img\n                src={replaceSize(img.webformatURL, stringToAdd)}\n                alt={img.tags}\n                onClick={() =>\n                  handleOpen(img.largeImageURL, img.tags, img.user, img.pageURL)\n                }\n              />\n            </ImageListItem>\n          ))}\n        </ImageList>\n      )}\n\n      <ImgDialog\n        isOpen={isOpen}\n        handleClose={handleClose}\n        handleInfo={handleInfo}\n        showInfo={showInfo}\n        selectedImg={selectedImg}\n        selectedAlt={selectedAlt}\n        selectedUser={selectedUser}\n        selectedPageUrl={selectedPageUrl}\n      />\n    </Container>\n  );\n};\n\nexport default ImageOutput;\n\nImageOutput.propTypes = {\n  selectedImg: PropTypes.string,\n  selectedAlt: PropTypes.string,\n  selectedUser: PropTypes.string,\n  selectedPageUrl: PropTypes.string,\n  isOpen: PropTypes.bool,\n  showInfo: PropTypes.bool,\n  handleOpen: PropTypes.func,\n  handleClose: PropTypes.func,\n  handleInfo: PropTypes.func,\n  replaceSize: PropTypes.func\n};\n"],"sourceRoot":""}